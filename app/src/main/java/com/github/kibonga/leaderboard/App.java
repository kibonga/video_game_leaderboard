/*
 * This source file was generated by the Gradle 'init' task
 */
package com.github.kibonga.leaderboard;

import com.github.kibonga.common.proto.ProtoReader;
import com.github.kibonga.common.serdes.PlayerDeserializer;
import com.github.kibonga.common.serdes.PlayerSerializer;
import com.github.kibonga.proto.generated.Player;
import java.time.Duration;
import java.util.Collections;
import java.util.Properties;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.ByteArraySerializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {
    private static final Logger logger = LoggerFactory.getLogger(App.class);
    private static final String protoPath = System.getProperty("proto.path", "/models/proto/");
    private static final String baseDir = System.getProperty("user.dir");
    private static final String playersProtoBinPath = baseDir + protoPath + "players.bin";
    public String getGreeting() {
        return "Hello World from leaderboard!";
    }

    public static void main(String[] args) {
        logger.info("Reading from proto...");
        final var protoReader = new ProtoReader<>(Player.class);
        logger.info("Full path={}", baseDir + protoPath + "players.bin");

        final var playersProto = protoReader.read(playersProtoBinPath);
        playersProto.forEach(x -> logger.info("[Player:id={};name={}]", x.getId(), x.getName()));

        final Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:29092");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, PlayerSerializer.class.getName());

        final KafkaProducer kafkaProducer = new KafkaProducer<>(props);

        logger.info("Writing to Producer...");
        playersProto.forEach(player -> {
            final byte[] key = String.valueOf(player.getId()).getBytes();

          final ProducerRecord record = new ProducerRecord("players", key, player);
            kafkaProducer.send(record);
        });
        logger.info("Successfully wrote to Producer...");

        kafkaProducer.flush();
        kafkaProducer.close();

        ///////////////////////////////////////////////

        final var consumerProps = new Properties();
        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:29092");
        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, "players-group");
        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, PlayerDeserializer.class.getName());
        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        final KafkaConsumer kafkaConsumer = new KafkaConsumer(consumerProps);

        kafkaConsumer.subscribe(Collections.singletonList("players"));
        final ConsumerRecords<byte[], byte[]> records = kafkaConsumer.poll(Duration.ofSeconds(3));

        logger.info("Reading from Consumer...");
        records.forEach(r -> {
            logger.info("[Key={}; Value={}]", r.key(), r.value());
        });
        logger.info("Successfully read from Consumer...");
    }
}
